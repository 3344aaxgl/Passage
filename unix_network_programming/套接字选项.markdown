---
layout: post
title:  "套接字选项"
date:   2018-07-26 20:15:51 +0800
categories: unix_network_programming
tags: c++
description: unix network programming读书笔记
---

## getsockopt和setsockopt函数

这两个函数仅用于套接字

{% highlight c++ %}

#include<sys/socket.h>
int getsockopt(int sockfd, int level, int optname, void * optval, socklen_t *optlen);

int setsockopt(int sockfd, int level, int optname, const void * optval, socklen_t optlen);
//若成功返回0，失败返回-1

{% endhihglight %}

其中sockfd必须指向一个打开的套接字描述符，level指定系统中解释选项的代码或为通用套接字代码或为某个特定于协议的代码。

optval是一个指向某个变量的指针，setsockopt从*optval中取得选项待设置的新值，getsockopt则把已获取的选项当前值存放到*optval。optval的的大小由最后一个参数决定。它对于setsockopt是一个值参数，对于getsockopt是一个值-结果参数。

套接字粗分为两大类：

* 启用或禁止某个特性的二元选项
* 取得并返回我们可以设置或检查的特定值的选项

## 检查选项是否支持并获取默认值

{% highlight c++ %}

union val
{
    int              i_val;
    long             l_val;
    struct linger    linger_val;
    struct timeval   time_val;
};

static char *sock_str_flag(union *val, int);
static char *sock_str_int(union *val, int);
static char *sock_str_linger(union *val, int);
static char *sock_str_timeval(union *val, int);

struct sock_opts
{
    const char *opt_str;
    int         opt_level;
    int         opt_name;
    char  *(*opt_val_str)(union val* ,int);
}sock_opts[] = {
      {"SO_BROADCAST",    SOL_SOCKET,   SO_BROADCAST,   sock_str_flag},
      {"SO_DEBUG",        SOL_SOCKET,   SO_DEBUG,       sock_str_flag},
      {"SO_DONROUTE",     SOL_SOCKET,   SO_DONROUTE,    sock_str_flag},
      {"SO_ERROR",        SOL_SOCKET,   SO_ERROR,       sock_str_int},
      {"SO_KEEPALIVE",    SOL_SOCKET,   SO_KEEPLIVE,    sock_str_flag},
      {"SO_LINGER",       SOL_SOCKET,   SO_LINGER,      sock_str_linger},
      {"SO_OOBINLINE",    SOL_SOCKET,   SO_OOBINLINE,   sock_str_flag},
      {"SO_RCVBUF",       SOL_SOCKET,   SO_RCVBUF,      sock_str_int},
      {"SO_SNDBUF",       SOL_SOCKET,   SO_SNDBUF,      sock_str_int},
      {"SO_RCVLOWAT",     SOL_SOCKET,   SO_RCVLOWAT,    sock_str_int},
      {"SO_SNDLOWAT",     SOL_SOCKET,   SO_SNDLOWAT,    sock_str_int},
      {"SO_RCVTIMEO",     SOL_SOCKET,   SO_RCVTIMEO,    sock_str_timeval},
      {"SO_SNDTIMEO",     SOL_SOCKET,   SO_SNDTIMEO,    sock_str_timeval},
      {"SO_REUSEADDR",    SOL_SOCKET,   SO_REUSEADDR,   sock_str_flag},
    #ifdef SO_REUSEPORT
      {"SO_REUSEPORT",    SOL_SOCKET,   SO_REUSEPORT,   sock_str_flag},
    #else
      {"SO_REUSEPORT",    0,          0,              NULL},
    #endif
      {"SO_TYPE",         SOL_SOCKET,   SO_TYPE,        sock_str_int},
      {"SO_USELOOPBACK",  SOL_SOCKET,   SO_USELOOBACK,  sock_str_flag},
      {"IP_TOS",          IPPROTO_IP,   IP_TOS,         sock_str_int},
      {"IP_TTL",          IPPROTO_IP,   IP_TTL,         sock_str_int},
      {"IPV6_DONTFRAG",   IPPROTO_IPV6, IP_DONTFRAG,    sock_str_flag},
      {"IPV6_UNICAST_HOPS", IPPROTO_IPV6, IPV6_UNICAST_HOPS, sock_str_int},
      {"IPV6_V6ONLY",     IPPROTO_IPV6, IPV6_V6ONLY,    sock_str_flag},
      {"TCP_MAXSEG",      IPPROTO_TCP,  TCP_MAXSEG,     sock_str_int},
      {"TCP_NODELAY",     IPPROTO_TCP,  TCP_NODELAY,    sock_str_flag},
      {"SCTP_AUTOCLOSE",  IPPROTO_SCTP, SCTP_AUTOCLOSE, sock_str_int},
      {"SCTP_BUREST",     IPPROTO_SCTP, SCTP_BUREST,    sock_str_int},
      {"SCTP_MAXSEG",     IPPROTO_SCTP, SCTP_MAXSEG,    sock_str_int},
      {"SCTP_NODELAY",    IPPROTO_SCTP, SCTP_NODELAY,   sock_str_flag},
      {NULL,              0,            0,              NULL}
    };


int main(int argc, char*argv[])
{
    int fd;
    socklen_t len;
    struct sock_opts* ptr;

    for(ptr = sock_opts; ptr->opt_str !=NULL; ptr++)
    {
        printf("%s:", ptr->opt_str);
        if(ptr->opt_val_str == NULL)
          printf("(undefine)\n");
        else
          {
              switch(ptr->opt_level)
              {
                  case SOL_SOCKET:
                  case IPPROTO_IP:
                  case IPPROTO_TCP:
                    fd = socket(AF_INET, SOCK_STREAM, 0);
                    break;
              #ifdef IPV6
                  case IPPROTO_IPV6:
                    fd = socket(AF_INET6, SOCK_STREAM,0);
                    break;
              #endif

              #ifdef IPPROTO_SCTP
                  case IPPROTO_SCTP:
                    fd = socket(AF_INET, SOCK_STREAM, IPPROTO_SCTP);
                    break;
              #endif 
              default:
                {
                    perror("Can't create fd for level %d\n", ptr->opt_level);
                    exit(-1);
                }
              }
              len = sizeof(val);
              if(getsockopt(fd, ptr->opt_level, ptr->opt_name, &val,&len) == -1)
              {
                  perror("getsockopt error");
              }
              else
              {
                  printf("defalue = %s\n", (*ptr->opt_val_str)(&val,&len));
              }
              close(fd);
          }
    }
    return 0;
}

static char strres[128];

static char* sock_st_flag(union val *str, int len)
{
    if(len != sizeof(int))
      snprintf(strres, sizeof(strres), "size (%d) not sizeof(int)", len);
    else
      snprintf(strres, sizeof(strres), "%s", (str->i_val == 0) ? "off":"on");
    return strres;
}

static char* sock_st_int(union val *str, int len)
{
    if(len != sizeof(int))
      snprintf(strres, sizeof(strres), "size (%d) not sizeof(int)", len);
    else
      snprintf(strres, sizeof(strres), "%s", str->i_val);
    return strres;
}

static char* sock_st_linger(union val *str, int len)
{
    if(len != sizeof(int))
      snprintf(strres, sizeof(strres), "size (%d) not sizeof(int)", len);
    else
      snprintf(strres, sizeof(strres), "l_onoff = %d, l_linger", str->linger_val.l_onoff , str->linger_val.l_linger);
    return strres;
}

static char* sock_st_time(union val *str, int len)
{
    if(len != sizeof(int))
      snprintf(strres, sizeof(strres), "size (%d) not sizeof(int)", len);
    else
      snprintf(strres, sizeof(strres), "%d sec, %dusec", str->time_val.tv_sec, str->time_val.tv_usec);
    return strres;
}

{% endhighlight %}

## 通用套接字选项

### SO_BROACAST套接字选项

本选项开启或禁止进程发送广播消息的能力。只有数据报套接字支持广播，并且还必须是在支持广播消息的网络上。如果目的地址是一个广播地址且本套接字选项没有打开，那么返回EACCESS错误。

### SO_DEBUG套接字选项

本选项仅由TCP支持。当给一个TCP套接字开启本选项时，内核将为TCP在该套接字发送和接收的所有分组保留详细跟踪信息。

### SO_DONTROUTE套接字选项

本选项规定外出的分组将绕过底层协议正常的路由机制。

### SO_ERROR套接字选项

当一个套接字发生错误时，名字为so_error的变量设为标准UNIX Exxx值中的一个，我们称它为套接字待处理错误。内核能够以下面两种方式之一立即通知进程这个错误

* 如果进程阻塞在对该套接字的select调用上。那么无论是检查可读条件还是可写条件，select均返回并设置其中一个或所有两个条件
* 如果进程使用信号驱动式I/O模型，那就给进程或进程组产生一个SIGIO信号。

然后进程可以通过访问SO_ERROR套接字获取so_error的值。由getsockopt返回的数据就是该套接字待处理错误。so_error随后由内核复位为0。

### SO_KEEPALIVE套接字

给一个TCP套接字设置保持存活选项后，如果2小时内在该套接字的任何一个方向上都没有数据交换，TCP就自动给对端发送一个保持存活探测分节。这是一个对端必须相应的TCP分节，它会导致以下三种情况：

* 对端以期望的ACK响应。应用进程得不到通知。在进过仍无动静的2个小时后，TCP将发出另一个探测分节
* 对端以RST响应，它告知本端TCP：对端已经崩溃并且重新启动。该套接字的待处理错误被置为ECONNRESET，套接字本身这被关闭
* 对端对保持存活探测分节没有任何响应。源自Berkeley的TCP将发送8个探测分节，两两相隔75秒，试图得到一个响应。

如果根本没有对TCP探测分节的响应，该套接字的待处理错误就被置为ETIMEOUT，套接字本身则被关闭。然而如果该套接字收到一个ICMP错误作为某个探测分节的响应，那就返回相应的错误，套接字本身也被关闭。

修改时间参数将影响所有的该主机上所有打开了本选项的套接字。

本选项的功能是检测对端主机是否崩溃或变的不可达。如果对端进程崩溃，它的TCP将跨连接发送一个FIN，这可以通过调用select很容易检测到。同时也要认识到，即使对任何保持存活探测分节均无响应，我们也不能肯定对端主机已经崩溃，因而TCP可能会终止一个有效连接。

本选项一般由服务器使用，不过客户也可以使用。服务器使用本选项是因为在等待客户的请求时，如果客户连接掉线，电源掉电或系统崩溃，那么进程将永远不会知道，并继续等待永远不会到达的输入。

### SO_LINGER套接字选项

本选项指定close函数对面向连接协议如何操作。默认是close操作立即返回，但是如果有数据残留在套接字发送缓冲区中，系统试着把这些数据发送给对端。

![7-1.png](7-1.png)

SO_LINGER套接字选项使我们可以改变这个默认配置。本选项要求在用户进程与内核之前传递如下结构，它在头文件\<sys/socket.h\>中定义：

{% highlight c++ %}

struct linger
{
  int l_onoff;
  int l_linger;
};

{% endhighlight %}

对setsockopt的调用将根据其中两个结构成员的值形成下列3种情形之一：

* 如果l_onoff为0，那么关闭本选项。l_linger的值被忽略，先前讨论的TCP默认设置生效，即close立即返回。
* 如果l_onoff为非0值，且l_linger值为0，那么当close某个连接时TCP将中止该连接。这就是说TCP将丢弃保留在套接字发送缓冲区中的任何数据，并发送给对端一个RST，而没有通常的四组连接终止序列。
* 如果l_onoff为非0值且l_linger也为非0值，那么当套接字关闭时进程将投入睡眠。直到a)所有数据都发送完且均被对方确认或b)延滞时间到。如果套接字被设置为非阻塞型，那么将不等待close完成，即便延滞时间非0也是如此。当使用SO_LINGER选项的这个特性时，应用进程检查close返回值是非常重要的，因为如果在数据发送完并确认前延滞时间到的话，close将返回EWOULDBLOCK错误，且套接字发送缓冲区中的任何残留数据都被丢弃

![7-2.png](7-2.png)


### SO_OOBINLINE套接字选项

当本选项开启时，带外数据将被留在正常的输入队列中。这种情况下接收的MSG_OOB标志不能用来读带外数据。

### SO_RCVBUF和SO_SNDBUF套接字选项

每个套接字都有一个发送缓冲区和接收缓冲区。接收缓冲区被TCP、UDP和SCTP用来保存接收到的数据，直到由应用进程来读取。

对于TCP来说，套接字接收缓冲区中可用空间的大小限制了TCP通告对端的窗口大小。TCP套接字接收缓冲区不可能溢出，因为不允许对端发出超过本端所通告对端的窗口大小。这就是TCP的流量控制，如果对端无视窗口大小而发出超过该窗口大小的数据，本端TCP将丢弃他们。

对于UDP来说，当接收到的数据报装不进套接字接收缓冲区时，该数据报就被丢弃。UDP是没有流量控制的：较快的发送端是很容易淹没较慢的接收端，导致接收端的UDP丢弃数据报。

这两个套接字选项允许我们改变这两个缓冲区的默认大小。

TCP窗口规模选项是在建立连接时用SYN分节与对端互换得到的，所以，对于客户，SO_RCVBUF选项必须在调用connect之前设置；对于服务，该选项必须在调用listen之前给监听套接字设置。给已连接套接字设置该选项对于可能存在的窗口规模没有任何影响。TCP套接字缓冲区的大小至少应该是相应连接的MSS值的四倍。这是因为TCP快速恢复算法的工作机制，发送端会使用3个重复的确认来检测分节是否丢失，发现某个分节丢失后，接收端将给每个分节发送一个重复的确认。

### SO_RCVLOWAT和SO_SNDLOWAT套接字选项

每个套接字还有一个接收低水位标记和一个发送低水位标记。他们由select函数使用。这两个套接字选项允许我们修改这两个低水位标记。

接收低水位标记是让select返回“可读”时套接字接收缓冲区中所需的数据量。对于TCP、UDP和SCTP套接字，其默认值为1。发送低水位标记是让select返回“可写”时套接字发送缓冲区中所需的空间可用。对于TCP套接字，其默认值通常为2048，UDP没有发送缓冲区，但是有发送缓冲区大小这个属性。

### SO_RCVTIMEO和SO_SNDtIMEO套接字选项

这两个选项允许我们给套接字的接收和发送设置一个超时值。访问它们的getsockopt和setsockopt函数的参数是指向timeval结构的指针。可以使用秒和微秒来规定超时。

接收超时影响5个输入函数：read、readv、recv、recvfrom和recvmsg。发送超时影响5个输出函数：write、writev、send、sendto和sendmsg。

### SO_REUSEADDR和SO_REUSEPORT

SO_REUSEADDR套接字选项能起到一下4个不同的功能：

* SO_REUSEADDR允许启动一个监听服务器并捆绑其众所周知的端口，即使以前建立的将该端口用作它们本地端口的连接仍然存在。
* SO_REUSEADDR允许在同一个端口上启动同一个服务程序的多个实例，只要每个实例捆绑一个不同的本地IP地址即可。可以是用IP别名技术在同一张网卡上设置多个IP地址
* SO_REUSEADDR允许单个进程捆绑同一个端口到多个套接字上，只要每次捆绑指定不同的IP地址即可。
* SO_REUSEADDR允许完全重复的捆绑：当一个IP地址和端口已绑定到某个套接字上时，如果传输协议支持，同样的IP地址和端口还可以绑定到另一个套接字上。一般来说本特性只支持UDP套接字。

SO_REUSEPORT语义如下：

* 本选项允许完全重复捆绑，不过只有在想要捆绑同一IP地址和端口的美国套接字都指定了本套接字选项才行。
* 如果捆绑的IP地址是一个多播地址，那么SO_REUSEADDR和SO_REUSEPORT等效

但并非所有系统都支持SO_REUSEPORT。

* 在所有TCP服务器程序中，在调用bind前设置SO_REUSEADDR选项
* 当编写一个可以在同一时刻同一主机上运行多次的多播应用程序时，设置SO_REUSEADDR套接字选项并将参加多播组的地址作为本地IP地址捆绑。

### SO_TYPE套接字选项

本选项返回套接字类型，返回的整数值是一个诸如SOCK_STREAM后SOCK_DGRAM之类的值

### SO_USELOOPBACK套接字选项

本选项仅用于路由域套接字，对于这些套接字，它的默认设置为打开。当本选项开启时，将接收在其上发送的任何数据报的副本。

## IPv4套接字选项

### IP_HDRINCL套接字选项

如果本选项是给一个原始IP套接字设置的，那么我们必须为所有在该套接字上发送的数据报构造自己的IP首部。

当本选项开启时，我们构造完整的IP首部，不过下列情况例外：

* IP总是计算并存储IP首部校验和
* 如果我们将IP标识字段设置为0，内核将设置该字段
* 如果源IP地址是INADDR_ANY，IP将把它设置为外出接口的主IP地址
* 如何设置IP选项取决于实现，有些实现取出我们预先使用IP_OPTIONS套接字选项设置的任何IP选项，把塔恩添加到构造的首部中，而其他实现则要求亲自在首部指定任何期望的IP选项
* IP首部中有些字段必须以主机字节序填写，有些必须以网络字节序填写，具体取决于实现

### IP_OPTIONS套接字选项

本选项允许在IP首部中设置IP选项

### IP_RECVDSTADDR套接字选项

本套接字选项导致所收到的UDP数据报目的IP地址由recvmsg函数作为辅助数据返回

### IP_RECVIF套接字选项

本套接字选项收到的UDP数据报的接收接口索引由recvmsg函数作为辅助数据返回

### IP_TOS套接字选项

本套接字允许我们为TCP、UDP和SCTP套接字设置IP首部中的服务类型字段。

### IP_TTL套接字选项

本选项设置或获取系统在从某个套接字发送的单播分组上默认的TTL值。

## IPv6套接字选项


### IPV6_CHECKSUM套接字选项

本选项指定用户数据中校验和所处位置的字节偏移。如果该值非负，那么内核将：

* 给出所有外出分组计算并存储校验和
* 验证外来分组的校验和，丢弃所有校验和无效的分组

### IPV6_DONTFRAG套接字选项

开启本选项将禁止为UDP套接字或原始套接字自动插入分片首部，外出分组中大小超过发送接口MTU的那些分组将被丢弃。

### IPV6_NEXTHOP套接字选项

将外出数据报的下一跳地址指定为一个套接字地址结构

### IPV6_PATHMTU套接字选项

本选项不能设置，只能获取。获取本选项时，返回值为由路径MTU发现功能确定的当前MTU

### IPV6_RECVDSTOPTS套接字选项

开启本选项表明，任何接收到的IPv6目的地选项都将由recvmsg作为辅助数据返回。本选项默认关闭

### IPV6_RECVHOPLIMIT套接字选项

开启本选项表明，任何接收到的IPv6步跳选项都将由recvmsg作为辅助数据返回。本选项默认关闭

### IPV6_RECVPATHMTU套接字选项

开启本选项表明，某条路径MTU发生变化时将由recvmsg作为辅助数据返回

### IPV6_RECVPKTINFO套接字选项

开启本选项表明，接收到的IPv6数据报的以下两条信息都将由recvmsg作为辅助数据返回：目的IPv6地址和到达接口索引

### IPV6_RECVRTHDR套接字选项

开启本选项表明，接收到的IPv6路由首部将由recvmsg作为辅助数据返回。本选项默认关闭

### IPV6_RECVTCLASS套接字选项

开启本选项表明，接收到的流通知类别将由recvmsg作为辅助数据返回。本选项默认关闭

### IPV6_UNICAST_HOPS套接字选项

本IPv6选项类似于IPv4的IP——TTL套接字选项。设置本选项会给在相应套接字上发送的外出数据报指定默认跳限，获取本选项会返回内核用于相应套接字的跳限值。

### IPV6_USE_MIN_MTU套接字选项

把本选项设置为1表明，路径MTU发现功能不必执行，为避免分片，分组就是用IPv6的最小MTU发送。把本选项设置为0表明，路径MTU发现功能对于所有的目的地都得执行。把本选项设置为-1，路径MTU发现功能仅对单播目的地执行，对于多播就是用最小MTU。本选项默认为-1

### IPV6_V6ONLY套接字选项

在一个AF——INET6套接字上开启本选项将限制它只执行IPv6通信


### IPV6_XXX套接字选项

大多数用于修改协议首部的IPv6选项假设：就UDP套接字而言，信息由recvmsg和sendmsg作为辅助数据在内核和应用进程之间传递；就TCP套接字而言，同样的信息改用getsockopt和setsockopt获取和设置。


## TCP套接字选项

### TCP_MAXSEG套接字选项

本选项允许我们获取或设置TCP连接的最大分节大小（MSS）。返回值是我们的TCP可以发送给对端的最大数据量，它通常是由对端使用SYN分节通告的MSS，除非我们的TCP选择使用一个比对端通告的MSS小些的值。

### TCP_NODELAY套接字选项

开启本选项将禁止TCP的Nagle算法。默认情况下该算法是启动的。该算法指出：一个tcp连接上最多只能有一个未被确认的未完成的小分组，在该分组ack到达之前不能发送其他的小分组，tcp需要收集这些少量的分组，并在ack到来时以一个分组的方式发送出去；其中小分组的定义是小于MSS的任何分组；

## fcntl函数

fcntl函数可以执行各种描述符控制操作。

![7-3.png](7-3.png)

fctl提供了与网络编程相关的如下特性：

* 非阻塞式I/O。通过使用F_SETFL命令设置O_NONBLOCK文件状态标志，可以把一个套接字设置为非阻塞型
* 信号驱动式I/O。通过使用F_SETTL命令设置O_ASYNC文件状态标志，可以把一个套接字设置成一旦其状态发生变化，内核就产生一个SIGIO信号
* F_SETOWN命令允许我们设置接收SIGIO和SIGURG信号的套接字属主（进程ID或进程组ID），其中SIGIO信号是套接字被设置为信号驱动式I/O后产生的。

{% highlight c++ %}

#include<fcntl.h>
int fcntl(int fd,int cmd,.../*int arg*/);

{% endhighlight %}


fcntl开启非阻塞式I/O的典型代码是：

{% highlight c++ %}

if((flags = fcntl(fd,F_GETFL,0)) < 0)
{
  perror("F_GETFL error");
  exit(1);
}

flags |= O_NONBLOCK;
if(fcntl(fd,F_SETFL,FLAGS) <0)
{
  perror("F_SETFL error");
  exit(1);
}

{% endhighlight %}

不能直接通过F_SETFL设置O_NONBLOCK，这样会把其他属性清掉


信号SIGIO和SIGURG与其他信号的区别在于，这两个信号仅在已使用F_SETOWN命令给相关套接字指派属主之后才会产生。F_SETOWN命令的整数类型参数arg既可以是一个正整数，指出接收信号的进程ID，也可以是一个负整数，其绝对值指出接收信号的进程组ID。F_GETOWN命令把套接字属主组委fcntl函数的返回值返回，它既可以是进程ID，也可以是进程组ID。指定接收信号的套接字属主为一个进程或是一个进程组ID的差别在于：前者仅导致单个进程接收信号，而后者导致整个进程组中的所有进程接收信号

使用socket函数新创建的套接字并没有属主，然而如果一个新套接字是从一个监听套接字创建而来的，那么套接字属主将由已连接套接字从监听套接字继承而来