---
layout: post
title:  "技巧"
date:   2018-06-10 11:22:51 +0800
categories: cpp_concurrency_in_action
tags: c++
description: cpp concurrency in action读书笔记
---

## 灵巧（smart）指针

当你使用灵巧指针替代C++的内建指针,你就能控制下面这些方面的指针的行为：

### 构造和析构
### 拷贝和赋值

实现auto_ptr时需注意，这里实际是移动拷贝，导致拷贝构造函数和赋值运算符不能传入const引用。且作为函数入参时，只能以引用的形式。

{% highlight c++ %}

template<typename T>
class my_auto_ptr
{
private:
    T* pointee;
public:
    my_auto_ptr(T* p = 0):pointee(p){}

    my_auto_ptr(my_auto_ptr&& mp):pointee(mp.pointee)//不能传入const，会对原有的对象进行更改,这里使用折叠引用
    {
        mp.pointee = 0;
    }

    my_auto_ptr& operator=(my_auto_ptr& mp)//不能传const，理由同上
    {
        if(this == &mp)
           return *this;
        delete pointee;
        pointee = mp.pointee;
        mp.pointee = 0;
        return *this;
    }

    ~my_auto_ptr
    {
        delete pointee;
    }
};

template<typename T>
void printTreeNode(ostream &s, auto_ptr<T>& p)//只能传引用，因为拷贝构造函数会对对象进行改动
{
    s << *p;
}
{% endhighlight %}

### Dereferencing(取出指针所指东西的内容)

{% highlight c++ %}

T& operator*() const//这里返回引用是因为pointee可能是指向继承类的指针，如果返回对象，则可能导致问题
{
    return *pointee;
}

T* operator->() const
{
    return pointee;
}

{% endhighlight %}

### 测试灵巧指针是否为NULL

要使得灵巧指针的行为和内建指针类似，可以增加转换到void*指针的转换函数或者重载!符号。

隐式转换成void*会导致不同类型的灵巧指针也能比较
{% highlight c++ %}
operator void*()
{
    return static_cast<void*>(pointee);
}

my_auto_ptr<int> mp ;
if(!mp)
  cout<<"mp is nullptr"<<endl;

if(mp);

if(!mp);
//如果是内建指针，两个不同类型的指针是无法比较的，但这里都隐式转换成了void*
my_auto_ptr<double> md;
if(mp == md);
{% endhighlight %}

重载!符号无法解决两个不同类型灵巧指针使用!再进行比较
{% highlight c++ %}
operator !()
{
    return (pointee == nullptr);
} 
if(!mp == !md);   
{% endhighlight %}

### 把灵巧指针转变成dumb指针

通过隐式类型转换，可以将灵巧指针转换成内建指针，但这样使得可以修改内建指针，同时这种转换只能进行一次，在需要进行多次转换的情况下会失效。

{% highlight c++ %}

operator T *()
{
    return pointee;
}

class TupleAccessors {
public:
TupleAccessors(const int *pt);

};

//需要先转换成int*,然后再通过构造函数转换成TupleAccessors，但c++只支持转换一次
TupleAccessors merged(const TupleAccessors& ta1,const TupleAccessors& ta2)
{

}
{% endhighlight %}

所以，除非有一个让人非常信服的原因去这样做，否则绝对不要提供转换到dumb指针的隐式类型转换操作符。

### 灵巧指针和继承类到基类的类型转换

派生类的内建指针可以转换到基类的内建指针，而对于灵巧指针，完全是两个不同的类型，所以无法直接转换。可以增加模板成员函数，进行隐式类型转换

{% highlight c++ %}

class Base
{
public:
    Base()
    {
        cout<<"Base constructor"<<'\n';
    }
};

class Derived:public Base
{
public:
    Derived()
    {

    }
    Derived(const Derived& d)
    {

    }
};

template<typename Other>
operator my_auto_ptr<Other>()
{
    //通过调用另一个模板类的构造函数来实现隐式转换
    return my_auto_ptr<Other>(pointee);
}

my_auto_ptr<Derived> mpd;

//这里经过RVO，只会调用默认构造函数，但在编译的时候会检查是否符合拷贝构造函数，
//如果拷贝构造函数入参是左引用，但实际传入的是个右值，则不匹配。所以利用引用折叠，将入参改为右值引用
//这样既可以支持左值，也可以支持右值

my_auto_ptr<Base> mb = mpd;
{% endhighlight %}

这种类型转换不单单可以支持有继承关系的对象，可以成功地用于任何合法的指针类型转换。

但是如果对象被继承了多次，那么对于内建指针，会“就近”转换，而灵巧指针却不会。

{% highlight c++ %}

class DerivedDerived:public Derived
{

};

void displayAndPlay(const Base* b)
{
    cout<<"Base"<<endl;
}

void displayAndPlay(const Derived*)
{
    cout<<"derived"<<endl;
}

void displayAndPlay(const my_auto_ptr<Base>& mb)
{

}

void displayAndPlay(const my_auto_ptr<Derived>& md)
{

}

my_auto_ptr<DerivedDerived> mdd;
//存在二义性
// displayAndPlay(mdd);

DerivedDerived* dd;

//调用Derived版的
displayAndPlay(dd);

{% endhighlight %}

无法让灵巧指针的行为与dumb指针一样。

### 灵巧指针和const

对于dumb指针来说，const既可以针对指针所指向的东西，也可以针对于指针本身，或者兼有两者的含义。灵巧指针也可以有类似的对象，但使用dumb指针我们能够用non-const指针初始化const指针，我们也能用指向non-cosnt对象的指针初始化指向const对象的指针。

带const的类型转换是单向的：从non-const到const的转换是安全的，但是从const到non-const则不是安全的。而且用const指针能做的事情，用non-const指针也能做，但是用non-const指针还能做其它一些事情（例如，赋值操作）。同样，用指向const对象的指针能做的任何事情，用指向non-const对象的指针也能做到，但是用指向non-const对象的指针能够完成一些指向const对象的指针所不能完成的事情（例如，赋值操作）。这些规则看起来与public继承的规则相类似。可以通过让每个指向T的灵巧指针类public派生自一个对应的指向const-T的灵巧指针类。

{% highlight c++ %}
template <class T> // 指向const对象的
class SmartPtrToConst
{ // 灵巧指针
    // 成员函数
  protected:
    union 
    {
        const T *constPointee; // 让 SmartPtrToConst 访问
        T *pointee;            // 让 SmartPtr 访问
    };
};
template <class T> // 指向non-const对象
class SmartPtr : public SmartPtrToConst<T>
{
public:
    SmartPtr(T* p){SmartPtrToConst<T>::pointee = p;}
};

Base pb;

my_auto_ptr<Base> mp1 ;                        //non-const对象，non-const指针
my_auto_ptr<const Base> mp2;                   //const对象，non-const指针
const my_auto_ptr<Base> mp3 = &pb;             //non-const对象，const指针
const my_auto_ptr<const Base> mp4 = &pb;       //const对象，const指针

SmartPtr<int> pCD = new int();
SmartPtrToConst<int> pConstCD = pCD; // 正确
{% endhighlight %}

为了防止同时拥有两个内建指针空间，这里使用union，同一个空间，两个指针。

## 引用计数

引用计数是这样一个技巧，它允许多个有相同值的对象共享这个值的实现。这个技巧有两个常用动机。第一个是简化跟踪堆中的对象的过程。第二个动机是如果很多对象有相同的值，将这个值存储多次是很无聊的。更好的办法是让所有的对象共享这个值的实现。这么做不但节省内存，而且可以使得程序运行更快，因为不需要构造和析构这个值的拷贝。

### 实现引用计数

string类实现引用计数可以将字符串指针与计数成员组合一个类，string类包含这个新类的指针。构造，拷贝构造，赋值时计数增加（赋值要注意原引用减少），析构时引用计数减少，如果计数为0则彻底删除。

{% highlight c++ %}

class my_string
{
private:
    struct stringvalue
    {
        char* data;
        int refCount;
        stringvalue(const char* initvalue = "");
        ~stringvalue();
    };
    stringvalue* value;
public:
    my_string(const char* initvalue = ""):value(new stringvalue(initvalue))
    {
        ++value->refCount;
    }
    
    ~my_string()
    {
        if (--value->refCount == 0)
            delete value;
    }

    my_string(const my_string& ms):value(ms.value)
    {
         ++value->refCount;
    }

    my_string& operator=(const my_string& ms)
    {
        if(this == &ms)
            return *this;
        if(--value->refCount == 0)
            delete value;
        value = ms.value;
        ++value->refCount;
        return *this;
    }
}; 

my_string::stringvalue::stringvalue(const char* initvalue)
{
    data = new char[strlen(initvalue)+1];
    strcpy(data,initvalue);
}

my_string::stringvalue::~stringvalue()
{
    delete [] data;
}
{% endhighlight %}

### 写时拷贝

在只读时，可以直接加上const限制条件，表明不修改成员。如果可以修改的版本，那么就需要根据引用计数的情况决定是否需要创建新的成员。

{% highlight c++ %}

//不会修改对象
const char& operator[](int index) const
{
    return value->data[index];
}

//如果引用大于1，说明还有其他对象包含此指针，所以创建新的指针
char& operator[](int index)
{
    //如果
    if(value->refCount > 1)
    {
        --value->refCount;
        value = new stringvalue(value->data);
    }
    return value->data[index];
}

{% endhighlight %}

### 指针、引用与写时拷贝

如果有成员函数返回了指向字符串成员的指针，那么就可以通过这个指针去修改这个字符串。可以加入一个标志是否能够进行共享的标志，在返回了指向字符串的指针后就无法在进行共享了。

{% highlight c++ %}

//构造函数默认是可共享的
my_string(const char* initvalue = ""):value(new stringvalue(initvalue))
{
    ++value->refCount;
    value->shareable = true;
}
//拷贝构造函数和赋值运算符要根据能否共享来决定是否创建新的字符串空间
my_string(const my_string &ms)
{
if (!ms.value->shareable)
    value = ms.value;
else
    value = new stringvalue(ms.value->data);
++value->refCount;
}

my_string& operator=(const my_string& ms)
{
if(this == &ms)
    return *this;
if(--value->refCount == 0)
    delete value;
if(ms.value->shareable)
   value = ms.value;
else
   value = new stringvalue(ms.value->data);
++value->refCount;
return *this;
}
//返回指向字符串的指针则关闭共享
char& operator[](int index)
{
    if(value->refCount > 1)
    {
        --value->refCount;
        value = new stringvalue(value->data);
    }
    value->shareable = false;
    return value->data[index];
}
{% endhighlight %}


### 带引用计数的基类

将计数操作放在基类中，后续的对象继承此类，也就实现了计数操作。

{% highlight c++ %}

class RCObject
{
  private:
    int refCOunt;
    bool shareable;

  public:
    RCObject() : refCOunt(0), shareable(true) {}

    ~RCObject() {}

    void addreference()
    {
        ++refCOunt;
    }

    void removereference()
    {
        if(--refCOunt == 0)
          delete this;
    }

    void markUnshareable()
    {
        shareable = false;
    }

    bool Isshareable()
    {
        return shareable;
    }

    bool Isshared()
    {
        return refCOunt > 1;
    }
};

{% endhighlight %}

### 自动的引用计数处理

当对字符串成员进行拷贝指针、给指针赋值和销毁指针操作时，引用计数字段也要发生相应的变化。这里可以使用灵巧指针。

{% highlight c++ %}

template <typename T>
class RCPtr
{
  private:
    T *pointee;
    void init();
  public:
    RCPtr(T *realPtr = 0):pointee(realPtr)
    {
        init();
    }
    RCPtr(const RCPtr &rhs):pointee(rhs.pointee)
    {
        init();
    }
    //如果已无引用，则将被删除
    virtual ~RCPtr() = 0
    {
        pointee->removereference();
    }
    //如果不允许共享，这需要创建新的字符串
    RCPtr &operator=(const RCPtr &rhs)
    {
        if(pointee != rhs.pointee)
        {
            if(pointee)
              pointee->removereference();
            pointee = rhs.pointee;
            init();
        }
        return *this;
    }
    T *operator->() const
    {
        return pointee;
    }
    T &operator*() const
    {
        return *pointee;
    }  
};

template<typename T>
void RCPtr<T>::init()
{
    if(pointee == 0)
      return ;
    if(pointee->Isshareable() == false)
      pointee = new T(*pointee);
    pointee->addreference();
}
{% endhighlight %}

### 合在一起

使用上述类，创建包含引用计数的string

{% highlight c++ %}

class my_RCstring
{
  private:
    struct stringvalue : public RCObject
    {   
        char* data;
        //构造函数只是分配空间，计数和共享在基类中处理
        stringvalue(const char *initvalue = "")
        {
            data = new char[strlen(initvalue) +1];
            strcpy(data,initvalue);
        }

        stringvalue(const stringvalue& str)
        {
            data = new char[strlen(str.data) +1];
            strcpy(data,str.data);
        }

        ~stringvalue()
        {
            delete [] data;
        }
    };
    RCPtr<stringvalue> value;
  public:
    my_RCstring(const char* initvalue):value(new stringvalue(initvalue))
    {

    }
    
    const char & operator[](int index) const
    {
        //转换成stringvalue
        return value->data[index];
    }
    //支持修改，所以创建新的字符串
    char & operator[](int index)
    {
        if (value->Isshared())
        {
            value = new stringvalue(value->data);
        }
        value->markUnshareable();
        return value->data[index];
    }
};
{% endhighlight %}

### 在现存类上增加引用计数

因为无法让类去包含灵巧指针，也无法继承计数类，所以可以创建一个新的类，包含灵巧指针。灵巧指针模板里包含有从计数基类继承而来的类对象的指针，从计数基类继承而来的类中包含有要增加引用计数类对象的指针。

![5.PNG](5.PNG)

{% highlight c++ %}

template <class T>
class RCIPtr
{
  public:
    RCIPtr(T *realPtr = 0);
    RCIPtr(const RCIPtr &rhs);
    ~RCIPtr();
    RCIPtr &operator=(const RCIPtr &rhs);
    const T *operator->() const; // see below for an
    T *operator->();             // explanation of why
    const T &operator*() const;  // these functions are
    T &operator*();              // declared this way
  private:
    struct CountHolder : public RCObject
    {
        ~CountHolder() { delete pointee; }
        T *pointee;
    };
    CountHolder *counter;
    void init();
    void makeCopy(); // see below
};
template <class T>
void RCIPtr<T>::init()
{
    if (counter->isShareable() == false)
    {
        T *oldValue = counter->pointee;
        counter = new CountHolder;
        counter->pointee = new T(*oldValue);
    }
    counter->addReference();
}
template <class T>
RCIPtr<T>::RCIPtr(T *realPtr)
    : counter(new CountHolder)
{
    counter->pointee = realPtr;
    init();
}
template <class T>
RCIPtr<T>::RCIPtr(const RCIPtr &rhs)
    : counter(rhs.counter)
{
    init();
}
template <class T>
RCIPtr<T>::~RCIPtr()
{
    counter->removeReference();
}
template <class T>
RCIPtr<T> &RCIPtr<T>::operator=(const RCIPtr &rhs)
{
    if (counter != rhs.counter)
    {
        counter->removeReference();
        counter = rhs.counter;
        init();
    }
    return *this;
}
template <class T>         // implement the copy
void RCIPtr<T>::makeCopy() // part of copy-on-
{                          // write (COW)
    if (counter->isShared())
    {
        T *oldValue = counter->pointee;
        counter->removeReference();
        counter = new CountHolder;
        counter->pointee = new T(*oldValue);
        counter->addReference();
    }
}
template <class T>                     // const access;
const T *RCIPtr<T>::operator->() const // no COW needed
{
    return counter->pointee;
}
template <class T>         // non-const
T *RCIPtr<T>::operator->() // access; COW
{
    makeCopy();
    return counter->pointee;
} // needed
template <class T>                    // const access;
const T &RCIPtr<T>::operator*() const // no COW needed
{
    return *(counter->pointee);
}
template <class T>        // non-const
T &RCIPtr<T>::operator*() // access; do the
{
    makeCopy();
    return *(counter->pointee);
} // COW thing

class Widget
{
  public:
    Widget(int size);
    Widget(const Widget &rhs);
    ~Widget();
    Widget &operator=(const Widget &rhs);
    void doThis();
    int showThat() const;
};

class RCWidget
{
  public:
    RCWidget(int size) : value(new Widget(size)) {}
    void doThis() { value->doThis(); }
    int showThat() const { return value->showThat(); }

  private:
    RCIPtr<Widget> value;
};
{% endhighlight %}