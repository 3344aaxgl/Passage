---
layout: post
title:  "效率"
date:   2018-05-23 20:56:51 +0800
categories: more_effective_c++
tags: c++
description: more effective c++读书笔记
---

## 牢记80－20准则（80－20 rule）

80－20准则说的是大约20％的代码使用了80％的程序资源；大约20%的代码耗用了大约80％的运行时间；大约20％的代码使用了80％的内存；大约20％的代码执行80％的磁盘访问；80％的维护投入于大约20％的代码上；

用profiler程序识别出令人讨厌的程序的20％部分

## 考虑使用lazy evaluation（懒惰计算法）

* 除非你确实需要，不去为任何东西制作拷贝。我们应该是懒惰的，只要可能就共享使用其它值。
* 区别对待读取和写入
* Lazy Fetching（懒惰提取）

可以使用const_cast来实现mutable关键字的功能

{% highlight c++ %}

const string& LargeObject::field1() const
{
// 声明指针, fakeThis, 其与this指向同样的对象
// 但是已经去掉了对象的常量属性
LargeObject * const fakeThis =
const_cast<LargeObject* const>(this);
if (field1Value == 0) {
fakeThis->field1Value = // 这赋值是正确的,
the appropriate data // 因为fakeThis指向的
from the database; //对象不是const
}
return *field1Value;
}
{% endhighlight %}

* Lazy Expression Evaluation(懒惰表达式计算)

## 分期摊还期望的计算

caching(缓存)那些已经被计算出来而以后还有可能需要的值。

STL预分配更多的内存

## 理解临时对象的来源

未命名的对象通常在两种条件下产生：为了使函数成功调用而进行隐式类型转换和函数返回对象时。

### 函数成功调用而进行隐式类型转换

仅当通过传值（by value）方式传递对象或传递常量引用（reference-to-const）参数时，才会发生这些类型转换。当传递一个非常量引用（reference-to-non-const）参数对象，就不会发生。如果非常量引用发生隐式转换，那额修改值并不是期望的非常量引用

{% highlight c++ %}

int Countchar(const string& str)
{
    cout<<"const string&"<<endl;
    return str.length();
}

int Count(string str)     //重载冲突
{
    cout<<" string"<<endl;
    return str.length();
}

int Countsize(string& str)     //无法进行隐式转换
{
    cout<<" string"<<endl;
    return str.length();
}
int main()
{
    char arr[] = {"hello world"};
    cout<<Countchar(arr)<<endl;
    cout<<Count(arr)<<endl;
    cout<<Count(arr)<<endl;
    //cout<<Countsize(arr)<<endl;//无法进行转换
    return 0;
}
{% endhighlight %}

### 函数返回对象

函数的返回值是临时的，因为它没有被命名；它只是函数的返回值。只要见到函数返回对象，就会有一个临时对象被建立（以后被释放）

## 协助完成返回值优化

无法通过返回引用和指针来进行返回值优化，因为局部对象在函数退出之后就被释放了，引用和指针都不能再被使用。

正确做法是通过编译器的RVO(返回值优化)和NRVO（命名返回值优化）

{% highlight c++ %}
class A
{
public:
  A(int i):data(i)
  {
      cout<<"called constructor"<<endl;
  }

  A(const A& a)
  {
      data = a.data;
      cout<<"called copy constructor"<<endl;
  }

  ~A()
  {
      cout<<"called deconstructor"<<endl;
  }
public:
  int data;
};

A RVOTest(int i)//RVO
{
    return A(i);
}

A NRVOTest(int i)//NRVO
{
    A a(i);
    return a;
}
int main()
{
    A a = RVOTest(1);
    A b = NRVOTest(2);
    return 0;
}
{% endhighlight %}

两次函数调用都只创建和释放了一个对象，分别创建了a和b，没有建立临时对象。编译器在为目标a，b分配的内存里构造return表达式定义的对象。

## 通过重载避免隐式类型转换

使用重载消除隐式转换，但是每一个重载的operator必须带有一个用户定义类型的参数

{% highlight c++ %}

class UPInt
{
public:
  UPInt(int value):data(value)
  {

  }
  friend const UPInt operator+(const UPInt& lhs, const UPInt& rhs);
  friend const UPInt operator+(const UPInt& lhs, int rhs);
  friend const UPInt operator+(int lhs, const UPInt& rhs);
  friend ostream& operator<<(ostream&, const UPInt& rhs);
private:
  int data;
};

const UPInt operator+(const UPInt& lhs, const UPInt& rhs)
{
   return UPInt(lhs.data + rhs.data);
}

const UPInt operator+(const UPInt& lhs, int rhs)
{
   return UPInt(lhs.data + rhs);
}

const UPInt operator+(int lhs, const UPInt& rhs)
{
   return UPInt(lhs + rhs.data);
}

ostream& operator<<(ostream& os, const UPInt& rhs)//函数返回值为右值，必须加上const
{
    os << rhs.data;
    return os;
}

int main()
{
    UPInt u1(1);
    UPInt u2(2);

    cout<<u1 + u2<<" "<<u1+1<<" "<<2+u2<<endl;
    return 0;
}
{% endlight %}

## 考虑用运算符的赋值形式（op=）取代其单独形式（op）

* 总的来说operator的赋值形式比其单独形式效率更高，因为单独形式要返回一个新对象，从而在临时对象的构造和释放上有一些开销。operator的赋值形式把结果写到左边的参数里，因此不需要生成临时对象来容纳operator的返回值。

* 提供operator的赋值形式的同时也要提供其标准形式，允许类的客户端在便利与效率上做出折衷选择。

{% highlight c++ %}

Rational a, b, c, d, result;
result = a + b + c + d; // 可能用了3个临时对象 每个operator+ 调用使用1个

result = a; //不用临时对象
result += b; //不用临时对象
result += c; //不用临时对象
result += d; //不用临时对象

{% endhighlight %}

* operator单独形式的实现

{% highlight c++ %}
//使用返回值优化
template<class T>
const T operator+(const T& lhs, const T& rhs)
{
 return T(lhs) += rhs; 
}

//可能编译器不支持命名返回值优化
template<class T>
const T operator+(const T& lhs, const T& rhs)
{
T result(lhs); // 拷贝lhs 到 result中
return result += rhs; // rhs与它相加并返回结果
}
{% endhighlight %}

## 考虑变更程序库

如果你的程序有I/O瓶颈，你可以考虑用stdio替代iostream，如果程序在动态分配和释放内存上使用了大量时间，你可以想想是否有其他的operator new 和 operator delete的实现可用。

## 理解虚拟函数、多继承、虚基类和RTTI所需的代价

### 虚函数

虚函数由虚函数表和虚函数指针实现。一个vtbl通常是一个函数指针数组。（一些编译器使用链表来代替数组，但是基本方法是一样的）在程序中的每个类只要声明了虚函数或继承了虚函数，它就有自己的vtbl，并且类中vtbl的项目是指向虚函数实现体的指针。

{% highlight c++ %}

class C1 {
public:
C1();
virtual ~C1();
virtual void f1();
virtual int f2(char c) const;
virtual void f3(const string& s);
void f4() const;
...
};
{% endhighlight %}

C1的virtual table数组看起来如下图所示：

![1.png](1.png "")

* 虚函数所需的第一个代价：你必须为每个包含虚函数的类的virtual talbe留出空间。类的vtbl的大小与类中声明的虚函数的数量成正比

* 虚函数所需的第二个代价是：在每个包含虚函数的类的对象里，你必须为额外的指针付出代价。

![2.png](2.png "")

* 虚函数所需的第三个代价：你实际上放弃了使用内联函数

虚函数不能是内联的。这是因为“内联”是指“在编译期间用被调用的函数体本身来代替函数调用的指令，”但是虚函数的“虚”是指“直到运行时才能知道要调用的是哪一个函数

###多重继承与虚基类

多继承经常导致对虚基类的需求。没有虚基类，如果一个派生类有一个以上从基类的继承路径，基类的数据成员被复制到每一个继承类对象里，继承类与基类间的每条路径都有一个拷贝。程序员一般不会希望发生这种复制，而把基类定义为虚基类则可以消除这种复制。

### 运行时类型识别（RTTI）

我们保证可以获得一个对象动态类型信息，如果该类型有至少一个虚函数。

RTTI被设计为在类的vtbl基础上实现。vtbl数组的索引0处可以包含一个type_info对象的指针，这个对象属于该vtbl

![3.png](3.png "")