---
layout: post
title:  "基于锁的并发数据结构设计"
date:   2018-06-20 14:40:51 +0800
categories: cpp_concurrency_in_action
tags: c++
description: cpp concurrency in action读书笔记
---

## 为并发设计的意义何在？

要为线程提供并发访问数据结构的机会。本质上，是使用互斥量提供互斥特性：在互斥量的保护下，同一时间内只有一个线程可以获取互斥锁。互斥量为了保护数据，显式的阻止了线程对数据结构的并发访问。

### 数据结构并发设计的指导与建议(指南)

在第3章的时候，已经对如何保证数据结构是线程安全的做过简单的描述：

* 确保无线程能够看到，数据结构的“不变量”破坏时的状态。
* 小心那些会引起条件竞争的接口，提供完整操作的函数，而非操作步骤。
* 注意数据结构的行为是否会产生异常，从而确保“不变量”的状态稳定。
* 将死锁的概率降到最低。使用数据结构时，需要限制锁的范围，且避免嵌套锁的存在。

## 基于锁的并发数据结构

基于锁的并发数据结构设计，需要确保访问线程持有锁的时间最短。