---
layout: post
title:  "无锁并发数据结构设计"
date:   2018-06-25 19:09:51 +0800
categories: cpp_concurrency_in_action
tags: c++
description: cpp concurrency in action读书笔记
---

## 定义和意义

不使用阻塞库的数据结构和算法，被称为无阻塞结构。

### 非阻塞数据结构

{% highlight c++ %}

class spinlock_mutex
{
  private:
    std::atomic_flag flag;
  public:
    void lock()
    {
        while(!flag.test_and_set(std::memory_order_acquire));
    }

    void unlock()
    {
        flag.clear(std::memory_order_release);
    }
};
{% endhighlight %}

### 无锁数据结构

作为无锁结构，就意味着线程可以并发的访问这个数据结构。线程不能做相同的操作；一个无锁队列可能允许一个线程进行压入数据，另一个线程弹出数据，当有两个线程同时尝试添加元素时，这个数据结构将被破坏。不仅如此，当其中一个访问线程被调度器中途挂起时，其他线程必须能够继续完成自己的工作，而无需等待挂起线程。

具有“比较/交换”操作的数据结构，通常在“比较/交换”实现中都有一个循环。使用“比较/交换”操作的原因：当有其他线程同时对指定数据的修改时，代码将尝试恢复数据。当其他线程被挂起时，“比较/交换”操作执行成功，那么这样的代码就是无锁的。当执行失败时，就需要一个自旋锁了，且这个结构就是“非阻塞-有锁”的结构。

### 无等待数据结构

无等待数据结构就是：首先，是无锁数据结构；并且，每个线程都能在有限的步数内完成操作，暂且不管其他线程是如何工作的。由于会和别的线程产生冲突，所以算法可以进行无数次尝试，因此并不是无等待的。

### 无锁数据结构的利与弊

使用无锁结构的主要原因：
* 将并发最大化。
* 鲁棒性。当一个线程在获取一个锁时被杀死，那么数据结构将被永久性的破坏。不过，当线程在无锁数据结构上执行操作，在执行到一半死亡时，数据结构上的数据没有丢失(除了线程本身的数据)，其他线程依旧可以正常执行。
* 没有任何锁(有可能存在活锁)，死锁问题不会困扰无锁数据结构。活锁的产生是，两个线程同时尝试修改数据结构，但每个线程所做的修改操作都会让另一个线程重启，所以两个线程就会陷入循环，多次的尝试完成自己的操作。

缺点：
* 虽然提高了并发访问的能力，减少了单个线程的等待时间，但是其可能会将整体性能拉低。


## 无锁数据结构的例子

无锁结构依赖与原子操作和内存序及相关保证，以确保多线程以正确的顺序访问数据结构。

### 写一个无锁的线程安全栈

添加一个节点相对来说很简单：

1. 创建一个新节点。
2. 将当新节点的next指针指向当前的head节点。
3. 让head节点指向新节点。

当有两个线程同时添加节点的时候，在第2步和第3步的时候会产生条件竞争：一个线程可能在修改head的值时，另一个线程正在执行第2步，并且在第3步中对head进行更新。这就会使之前那个线程的工作被丢弃，亦或是造成更加糟糕的后果。

{% highlight c++ %}

template<typename T>
class lock_free_stack
{
  private:
    struct node
    {
        std::shared_ptr<T> data;
        node* next;

        node(T value):data(std::make_shared<T>(value))
        {

        }
    };
    std::atomic<node*> head;
  public:
    void push(T value)
    {
        node* const new_node = new node(value);
        new_node->next = head.load();
        while(!head.compare_exchange_weak(new_node->next,new_node));
    }

    std::shared_ptr<T> pop()
    {
        node* old_head = head.load();
        while(old_head && head.compare_exchange_strong(old_head,old_head->next));
        return old_head?old_head->data:std::shared_ptr<T>();
    }
};
{% endhighlight %}

无锁并不是没有等待，插入和取出操作都是类似于自旋锁，没有成功就再次循环去做，直到操作成功。

### 停止内存泄露：使用无锁数据结构管理内存

无锁操作有一个问题就是存在内存泄露。push操作插入节点后就和这个没有关系了，而pop操作需要将节点的空间释放，如果要释放的节点还有其他线程在使用，则会出现问题。所以要在没有其他线程引用该节点的情况下删除。

{% highlight c++ %}

//通过线程计数解决内存泄露的无锁队列
template<typename T>
class lock_free_stack_by_threadcount
{
  private:
    struct node
    {
        std::shared_ptr<T> data;
        node* next;

        node(T value):data(std::make_shared<T>(value))
        {

        }
    };
    static void delete_nodes(node* nodes)
    {
        while(nodes)
        {
            node* next = nodes->next;
            delete nodes;
            nodes = next;
        }
    }

    void chain_pending_nodes(node* first,node* last)
    {
        last->next = to_be_deleted.load();
        while(to_be_deleted.compare_exchange_weak(last->next,first));
    }

    void chain_pending_nodes(node* nodes)
    {
        node* first = nodes;
        node* last = first;
        while(nodes)
        {
            last = nodes;
            nodes = nodes->next;
        }
        chain_pending_nodes(first,last);
    }

    void chain_pending_node(node* nodes)
    {
        chain_pending_nodes(nodes,nodes);
    }

    void try_reclaim(node* old_head)
    {
        if(threads_in_pop == 1)
        {
            node * nodes_to_delete = to_be_deleted.exchange(nullptr);
            //这里需要在校验一次是因为如果在第一次校验和原子操作之间，有其他的节点加入待删除
            //链表中，而这里不再次进行判断的话，那这个新加入的节点可能会出现内存泄露
            //只要有一个瞬间，线程计数为1，那就说明该节点没有其他人引用了
            if(!--threads_in_pop)
            {
                delete_nodes(nodes_to_delete);
            }
            else
            {
                chain_pending_nodes(nodes_to_delete);
            }
            delete old_head;
        }
        else
        {
            chain_pending_node(old_head);
            --threads_in_pop;
        }
    }
    std::atomic<node*> head;
    std::atomic<unsigned> threads_in_pop;
    std::atomic<node*> to_be_deleted;
  public:
    void push(T value)
    {
        node* new_node = new node(value);
        new_node->next = head.load();
        while(!head.compare_exchange_weak(new_node->next, new_node));
    }

    std::shared_ptr<T> pop()
    {
        //操作之前，先将计数增加,使用前置自增，效率更高
        ++threads_in_pop;
        node* old_head = head.load();
        while(old_head && !head.compare_exchange_weak(old_head,old_head->next));
        std::shared_ptr<T> res;
        if(old_head)
        {
            res.swap(old_head->data);
        }
        try_reclaim(old_head);
        return res;      
    }

    lock_free_stack_by_threadcount()
    {
        head.store(nullptr);
    }

    ~lock_free_stack_by_threadcount()
    {
        node* old_head = head.load();
        node* next_node = old_head->next;
        while(old_head)
        {
           delete old_head;
           old_head = next_node;
           next_node = next_node->next;
        }
    } 
};
{% endhighlight %}

使用线程计数来避免内存泄露效率不如风险指针，因为线程计数是只要当前有线程在进行pop操作就将其放入待删除链表，而风险指针是将指针与节点挂钩，只要节点没有风险指针指向，就可以删除。

### 检测使用风险指针(不可回收)的节点

当有线程去访问要被(其他线程)删除的对象时，会先设置对这个对象设置一个风险指针，而后通知其他线程，删除这个指针是一个危险的行为。一旦这个对象不再被需要，那么就可以清除风险指针了。

{% highlight c++ %}

//使用风险指针解决内存泄露问题

unsigned const max_hazard_pointers = 128;
struct hazard_pointer
{
    std::atomic<std::thread::id> id;
    std::atomic<void*> pointer;
};

hazard_pointer hazard_pointers[max_hazard_pointers];

class hp_owner
{
  private:
    hazard_pointer* hp;
  public:
    hp_owner(const hazard_pointer&) = delete;
    hp_owner& operator=(const hazard_pointer&) = delete;
    hp_owner():hp(nullptr)
    {
        for(unsigned i = 0; i < max_hazard_pointers; i++)
        {
            std::thread::id old_id;
            if(hazard_pointers[i].id.compare_exchange_strong(old_id,std::this_thread::get_id()))
            {
                hp = &hazard_pointers[i];
                break;
            }
        }
        if(!hp)
          throw std::runtime_error("no hazard pointer available");
    }

    std::atomic<void*>& get_pointer()
    {
        return hp->pointer;
    }

    ~hp_owner()
    {
        hp->pointer.store(nullptr);
        hp->id.store(std::thread::id());
    }
};

std::atomic<void*>& get_hazard_pointer_for_current_thread()
{
    thread_local static hp_owner hp;
    return hp.get_pointer();
}

bool outstanding_hazard_pointers_for(void* nodes)
{
    for(int i = 0;i < max_hazard_pointers; i++)
    {
        if(hazard_pointers[i].pointer.load() == nodes)
          return true;
    }
    return false;
}

template <typename T>
void to_delete(void*p)
{
    delete static_cast<T*>(p);
}

struct data_to_reclaim
{
    void* data;
    std::function<void(void *)> deleter;
    data_to_reclaim* next;

    template <typename T>
    data_to_reclaim(T* value):data(value),deleter(&to_delete<T>),next(0)
    {

    }

    ~data_to_reclaim()
    {
        deleter(data);
    }
};

std::atomic<data_to_reclaim*> nodes_to_reclaim;

void add_to_reclaim_list(data_to_reclaim* node)
{
    node->next = nodes_to_reclaim.load();
    while(nodes_to_reclaim.compare_exchange_weak(node->next,node));
}

template <typename T>
void reclaim_later(T* data)
{
    add_to_reclaim_list(new data_to_reclaim(data));
}

void delete_node_with_no_hazards()
{
    data_to_reclaim* current = nodes_to_reclaim.exchange(nullptr);
    while(current)
    {
        data_to_reclaim* next = current->next;
        if(outstanding_hazard_pointers_for(current->data))
        {
            delete current;
        }
        else
        {
            add_to_reclaim_list(current);
        }
        current = next;        
    }
}

template <typename T>
class lock_free_stack_by_hazardpointer
{
  private:
    struct node
    {
        std::shared_ptr<T> data;
        node* next;

        node(T value):data(std::make_shared<T>(value))
        {

        }
    };
    std::atomic<node*> head;
  public:
    lock_free_stack_by_hazardpointer()
    {
        head.store(nullptr);
    }

    ~lock_free_stack_by_hazardpointer()
    {
        while(pop());
    }

    void push(T value)
    {
        node* new_node = new node(value);
        new_node->next = head.load();
        while(!head.compare_exchange_weak(new_node->next, new_node));
    }

    std::shared_ptr<T> pop()
    {
        std::atomic<void*>& hp = get_hazard_pointer_for_current_thread();
        node* old_head = head.load();

        do
        {
            node* temp;
            do
            {
                temp = old_head;
                hp.store(old_head);//可能导致节点删除时没法清除空间
                old_head = head.load();
            } while (old_head != temp); //保证hp存储原子操作前后head保持一致，这样风险指针指向的才是头结点
        } while (old_head && !head.compare_exchange_strong(old_head, old_head->next));

        hp.store(nullptr);//删除完后清空风险指针
        std::shared_ptr<T> res;
        if(old_head)
        {

            res.swap(old_head->data);
            if(outstanding_hazard_pointers_for(old_head))//风险指针不为空，加入待删除链表
            {
                reclaim_later(old_head);
            }
            else//删除节点
            {
                delete old_head;
            }
            //这里再次删除没有风险指针的节点是因为在删除节点时，
            //可能有风险指针指向节点，但这个风险指针这次没有删除这个节点
            //再次循环时删除了另一个节点，从而导致这个节点没有线程会将其删除
            delete_node_with_no_hazards();
        }
        return res;
    }
};

{% endhighlight %}

这个方法有个缺点(有增加内存使用的情况)：就是得对回收链表上的节点进行计数，这就意味着要使用原子变量，并且还有很多线程争相对回收链表进行访问。

风险指针另一个缺点：与IBM申请的专利所冲突。

### 检测使用引用计数的节点