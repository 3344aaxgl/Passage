---
layout: post
title:  "线程管理"
date:   2018-05-13 15:28:51 +0800
categories: cpp_concurrency_in_action
tags: c++
description: cpp concurrency in action读书笔记
---

## 2.1线程管理的基础

每个程序至少有一个线程：执行main函数的线程。

### 2.1.1启动线程

线程在 std::thread 对象创建(为线程指定任务)时启动

可以以函数指针，lambda表达式，仿函数，std::function初始化thred对象。

{% highlight c++ %}

#include <iostream>
#include <thread>

using namespace std;

int do_something()
{
    cout<<"called function\n";
    return 0;
}

auto la = [](){cout<<"called lambda\n";};

struct do_otherthig
{
    void operator()()
    {
        cout<<"called functor\n";
    }
};

auto lb = [](){cout<<"called std::function\n";};

struct func 
{
  int& i;
  func(int& i_) : i(i_) {}
  void operator() ()
  {
    for (unsigned j=0 ; j<1000000 ; ++j)
    {
      do_something1(i);// 1. 潜在访问隐患:悬空引用
    }
  }

  void do_something1(int &i)
  {
      
  }   
};


void oops() 
{
  int some_local_state=0;
  func my_func(some_local_state);
  std::thread my_thread(my_func); 
  my_thread.detach(); // 2. 不等待线程结束
}// 3. 新线程可能还在运行

int main(int argc, char const *argv[])
{
    thread t1(do_something);
    thread t2(la);
    thread t3((do_otherthig()));       //传递临时变量，会被解析为函数声明。可以使用多组括号或大括号进行初始化
    thread t4{function<void(void)>(lb)};
    t1.join();
    t2.join();
    t3.join();
    t4.join();
    
    thread t5(oops);
    t5.detach();
    return 0;
}

<% endhighlight %>

### 2.1.2 等待线程完成

可以使用join函数等待线程完成


### 2.1.3 特殊情况下的等待

当线程出现异常是也能够调用到join函数.可以使用try catch进行处理，但和内存泄漏一样，可以使用RAII（资源获取即初始化）进行处理。

{% highlight c++ %}

void func()
{
    thread t6(do_something);
    do_otherthig d1;
    try
    {
        d1();
    }
    catch(...)       //出现异常，也要调用join
    {
        t6.join();
        throw;
    }
    t6.join();
}
{% endhighlight%}

**使用RAII等待线程完成**

{% highlight c++ %}

class thread_guard
{
    private:
      thread& t;
    public:
      thread_guard(thread& t_):t(t_)
      {

      }
      ~thread_guard()
      {
          if(t.joinable())
          {
              t.join();
          }
      }

      thread_guard(thread_guard const &) = delete;
      thread_guard& operator = (thread const &) = delete;
};

void f()
{
    thread t7(do_something);
    do_otherthig d1;
    thread_guard tg1(t7);
    d1();
}

{% endhighlight %}

### 2.1.4 后台运行线程

调用 std::thread 成员函数detach()来分离一个线程。之后,相应的 std::thread 对象就与实际执行的线程无关了,并且这个线程也无法加入。

{% highlight c++ %}

std::thread t(do_background_work);t.detach();assert(!t.joinable());

{% endhighlight %}

## 2.2 向线程函数传递参数

C++封装thread是通过将thread entry functor和所有的参数打包到一个数据结构里，然后通过库中的一个预先写好的OS compatible thread entry function启动线程，在这个函数中将传进去的数据结构解包再运行。这个过程需要将所有的参数copy/move一份。所以如果函数参数为引用，则需要使用std::ref将参数转换成引用的形式

{% highlight c++ %}
void funa(int i,string && s)
{
    cout<<"the value of param is:"<<i<<endl;
}

struct funb
{
    void operator()(int i,string & s)
    {
        cout<<"the value of param is:"<<i<<endl;
    }
};

int main()
{
    thread t6(funa,1,"aaa");  //被thread拷贝之后变成右值了
    t6.join(); 

    char buf[] = {"hello"};
    thread t7(funa,2,string(buf));//直接传入buf可能在thread调用funa之前，buf指向的空间已经被释放  
    t7.join();  

    string str("world");
    funb b;
    thread t8(&funb::operator(),&b,3,ref(str));//告诉thread传递的是引用，否则线程会先拷贝副本，然后将副本传递给函数
    t8.join(); 
    return 0;
}

{% endhighlight %}

在线程`t8`中，第一个参数为调用的成员函数，第二个参数为对象的指针

线程参数还可以使用移动语义

{% highlight c++ %}

string str1("my test");
thread t9(funa,4,std::move(str1)); //移动传值
cout<<"now the str1 is:"<<str1<<endl;
t9.join();

{% endhighlight %}

## 2.3转移线程所有权

线程所有权可以移动，但是不能拷贝

{% highlight c++ %}

std::thread t10(some_function);            //创建t10
std::thread t12 = std::move(t10);           //t10将所有权转移给t12
t10 = std::thread(some_other_function);   //隐式调用移动操作
std::thread t13;
t13 = std::move(t12);              //t12所有权转移给t13
//t10 = std::move(t13);              //错误，t10已经有关联的线程

{% endhighlight %}


动操作就可以避免很多不必要的麻烦,当某个对象转移了线程的所有权后,它就不能对线程进行加入或分离。

{% highlight c++ %}

class scoped_thread
{
  private:
    thread t;
  public:
    explicit scoped_thread(thread t_):t(move(t_))
    {
        if(!t.joinable())
          throw std::logic_error("no thread");
    }

    ~scoped_thread()
    {
        t.join();
    }

    scoped_thread(scoped_thread const& ) = delete;
    scoped_thread& operator=(scoped_thread const&) = delete;
};

int some_local_state;
scoped_thread t(std::thread((func(some_local_state))));

{% endhighlight %}

## 2.4 运行时决定线程数量

std::thread::hardware_concurrency将返回能同时并发在一个程序中的线程数量

{% highlight c++ %}

template<typename Iterator,typename T>
struct accumulate_block
{
    void operator()(Iterator first,Iterator second,T& result)
    {
        result = accumulate(first,second,result);
    }
};

template<typename Iterator, typename T>
T parallel_accumulate(Iterator first,Iterator last,T init)
{
    unsigned long const length = std::distance(first,last);
    if(!length)
      return init;
    unsigned long const min_per_thread = 25;
    unsigned long const max_threads = (length + min_per_thread -1)/min_per_thread;
    unsigned long const hanrdware_threads = std::thread::hardware_concurrency();
    unsigned long const num_threads = min(hanrdware_threads != 0 ? hanrdware_threads:2, max_threads);
    unsigned long const blocks_size = length / num_threads;

    std::vector<T> results(num_threads);
    std::vector<std::thread> threads(num_threads-1);

    Iterator block_start = first;
    for(int i= 0; i<(num_threads-1); i++)
    {
        Iterator block_end = block_start;
        std::advance(block_end,blocks_size);
        threads[i] = thread(accumulate_block<Iterator, T>(),block_start,block_end,ref(results[i]));
        block_start = block_end;
    }
    accumulate_block<Iterator, T>()(block_start, last, results[num_threads-1]);
    for_each(threads.begin(),threads.end(),std::mem_fn(&std::thread::join));
    for(int i = 0;i < num_threads; i++)
       cout<< results[i]<<" ";
    return accumulate(results.begin(),results.end(),init);
}
{% endhighlight %}