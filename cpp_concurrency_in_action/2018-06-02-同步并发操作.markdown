---
layout: post
title:  "同步并发操作"
date:   2018-06-02 16:03:51 +0800
categories: cpp_concurrency_in_action
tags: c++
description: cpp concurrency in action读书笔记
---
## 4.1 等待一个事件或其他条件

一个条件变量会与多个事件或其他条件相关，并且一个或多个线程会等待条件的达成。当某些线程被终止时，为了唤醒等待线程(允许等待线程继续执行)终止的线程将会向等待着的线程广播“条件达成”的信息。

### 4.1.1 等待条件达成

C++标准库对条件变量有两套实现：`std::condition_variable` 和 `std::condition_variable_any` 。这两个实现都包含在 <condition_variable> 头文件的声明中。两者都需要与一个互斥量一起才能工作(互斥量是为了同步)；前者仅限于与 `std::mutex` 一起工作，而后者可以和任何满足最低标准的互斥量一起工作，从而加上了_any的后缀。因为 `std::condition_variable_any` 更加通用，这就可能从体积、性能，以及系统资源的使用方面产生额外的开销。

{% highlight c++ %}

std::mutex mu;
std::condition_variable data_cond;
std::queue<int> data_queue;
int sum = 0;

auto producer = [](){return (data_queue.size() < 5);};

auto consumer = [](){return (data_queue.size() >= 5);};

void data_producer()
{
    while(1)
    {
        std::unique_lock<std::mutex> lk(mu);
        data_cond.wait(lk,producer); //封装之后加上谓词，不用通过while循环处理假唤醒
        while(data_queue.size() < 5)    //生产者每次生产5个
        {
            std::cout <<"producer:"<<sum <<'\n';
            data_queue.push(sum++);
        }
        data_cond.notify_one();//通知消费者
    }
}

void data_consumer()
{
    while (1)
    {
        std::unique_lock<std::mutex> lk(mu);//需要使用unique_lock，wait会对mutex解锁
        data_cond.wait(lk, consumer);
        while (data_queue.size() > 0)//消费者全部消费
        {
            std::cout << "consumer:" << data_queue.front() << '\n';
            data_queue.pop();
        }
        data_cond.notify_one();//通知生产者
    }
}
{% endhighlight %}

wait()会去检查这些条件(通过调用所提供的lambda函数)，当条件满足(lambda函数返回true)时返回。如果条件不满足(lambda函数返回false)，wait()函数将解锁互斥量，并且将这个线程(上段提到的处理数据的线程)置于阻塞或等待状态。当准备数据的线程调用notify_one()通知条件变量时，处理数据的线程从睡眠状态中苏醒，重新获取互斥锁，并且对条件再次检查，在条件满足的情况下，从wait()返回并继续持有锁。当条件不满足时，线程将对互斥量解锁，并且重新开始等待。

### 4.1.2 使用条件变量构建线程安全队列

队列的三组操作：

* 1.对整个队列的状态进行查询(empty()和size());
* 2.查询在队列中的各个元素(front()和back());
* 3.修改队列的操作(push(),pop()和emplace())。

这里我们提供pop()函数的两个变种：try_pop()和wait_and_pop()。try_pop() ，尝试从队列中弹出数据，总会直接返回(当有失败时)，即使没有值可检索；wait_and_pop()，将会等待有值可检索的时候才返回。

{% highlight c++ %}

template<typename T>
class threadsafe_queue
{
private:
    std::mutex data_mut;
    std::queue<T> data_queue;
    std::condition_variable data_cond;
public:
    threadsafe_queue(){};

    threadsafe_queue(threadsafe_queue const& other)
    {
        std::lock_guard<std::mutex> lock_guard(data_mut);
        data_queue = other.data_queue;
    }

    threadsafe_queue& operator=(const threadsafe_queue&) = delete;//不允许简单赋值

    void push(T value);

    bool try_pop(T& value);

    std::shared_ptr<T> try_pop();

    void wait_and_pop(T& value);

    std::shared_ptr<T> wait_and_pop();

    bool empty() const;

};

template<typename T>
void threadsafe_queue<T>::push(T value)
{
    std::lock_guard<std::mutex> lk(data_mut);
    data_queue.push(value);
    data_cond.notify_one();//通知等待线程
}

template<typename T>
void threadsafe_queue<T>::wait_and_pop(T& value)
{
    std::lock_guard<std::mutex> lk(data_mut);
    data_cond.wait(lk, [this](){return !data_queue.empty();});//队列不为空唤醒
    value = data_queue.front();
    data_queue.pop();
}

template<typename T>
std::shared_ptr<T> threadsafe_queue<T>::wait_and_pop()
{
    std::lock_guard<std::mutex> lk(data_mut);
    data_cond.wait(lk, [this](){return !data_queue.empty();});
    std::shared_ptr<T> res = std::make_shared<T>(data_queue.front());
    data_queue.pop();
    return res;
}

template<typename T>
bool threadsafe_queue<T>::try_pop(T& value)
{
    std::lock_guard<std::mutex> lk(data_mut);
    if(data_queue.empty())
      return false;
    value = data_queue.front();
    data_queue.pop();
    return true;
}

template<typename T>
std::shared_ptr<T> threadsafe_queue<T>::try_pop()
{
    std::lock_guard<std::mutex> lk(data_mut);
    if (data_queue.empty())
        return std::shared_ptr<T>();
    std::shared_ptr<T> res(std::make_shared<T>(data_queue.front()));
    data_queue.pop();
    return res;
}

template<typename T>
bool threadsafe_queue<T>::empty() const
{
    return data_queue.empty();
}
{% endhighlight %}

## 4.2 使用期望等待一次性事件

在C++标准库中，有两种“期望”，使用两种类型模板实现，声明在头文件中: 唯一期望( std::future<> )和共享期望( std::shared_future<> )。这是仿照 std::unique_ptr 和 std::shared_ptr 。 std::future 的实例只能与一个指定事件相关联，而 std::shared_future 的实例就能关联多个事件。后者的实现中，所有实例会在同时变为就绪状态，并且他们可以访问与事件相关的任何数据。

### 4.2.1 带返回值的后台任务

std::async 会返回一个 std::future 对象，这个对象持有最终计算出来的结果。当你需要这个值时，你只需要调用这个对象的get()成员函数；并且会阻塞线程直到“期望”状态为就绪为止；之后，返回计算结果。

{% highlight c++ %}

template<typename T>
int parallel_sum(T beg,T end)
{
    int len = end - beg;
    T mid = beg + len/2;
    if(len < 1000)
      return std::accumulate(beg,end,0);
    auto ft = std::async(std::launch::async, parallel_sum<T>, mid, end);
    int result  = parallel_sum(beg, mid);
    return result + ft.get();
}
{% endhighlight %}

可以在调用函数之前，向std::async传递一个额外参数，这个参数类型是std::launch，可以是std::launch::async，表示启用异步求值，也可以是std::launch::defered，表示惰性求值，用来表明函数调用被延迟到wait()或get()函数调用时才执行。

除此之外，参数类似thread，可以传入函数，函数对象，lambda表达式，function，传入引用需要加上std::ref。	

### 4.2.2 任务与期望

类模板 std::packaged_task 包装任何可调用 (Callable) 目标（函数、 lambda 表达式、 bind 表达式或其他函数对象），使得能异步调用它。其返回值或所抛异常被存储于能通过 std::future 对象访问的共享状态中。

正如 std::function，std::packaged_task 是多态、具分配器的容器：可在堆上或以提供的分配器分配存储的可调用对象。


{% highlight c++ %}

void task_fun()
{
    //包装lambda表达式
    std::packaged_task<int(int,int)> pa([](int a,int b)-> int {return a + b;});
    std::future<int> ft = pa.get_future();
    pa(1,2);
    std::cout<<"lambda:"<<ft.get()<<'\n';
    
    //包装bind
    std::packaged_task<int()> pb(std::bind(add_func,1,2));
    auto ft1 = pb.get_future();
    pb();
    std::cout<<"bind:"<<ft1.get()<<'\n';
    
    //通过thread调用
    std::packaged_task<int(int,int)> pc(add_func);
    auto ft2 = pc.get_future();
    std::thread t1(std::move(pc),1,4);
    t1.join();
    std::cout<<"thread:"<<ft2.get()<<'\n';
}
{% endhighlight %}


### 4.2.3 使用std::promises

在线程函数中给外面传进来的promise赋值，当线程函数执行完成之后就可以通过promis获取该值了，值得注意的是取值是间接的通过promise内部提供的future来获取的。


{% highlight c++ %}
void promise_func()
{
    std::promise<int> p;
    std::future<int> ft = p.get_future();
    std::thread t([](std::promise<int>& p){p.set_value(1);},std::ref(p));
    t.join();
    std::cout<<"promise:"<<ft.get()<<'\n';
}
{% endhighlight %}

std::async可以直接进行异步操作，而std::packaged_stak需要包装一个执行目标，然后由std::thread进行一步调用，std::promise可以由线程外传入并在线程中给其赋值，以上三者都可以通过std::future获取返回值

### 4.2.4 为“期望”存储“异常”

函数作为 std::async 的一部分时,当在调用时抛出一个异常,那么这 个异常就会存储到“期望”的结果数据中,之后“期望”的状态被置为“就绪”,之后调用get()会抛 出这个存储的异常。

{% highlight c++ %}
void async_exception()
{
    auto lam = [](double d)-> double{if(d < 0){throw std::out_of_range("d<0");}return d;};
    std::future<double> ft = std::async(std::launch::async,lam,-1);
    ft.get();
}
{% endhighlight %}

当打包函数抛出一个异常,这个异常将被存储在“期望”的结果中,准备在调用get()再次抛出。

{% highlight c++ %}
void packaged_task_exception()
{
    std::packaged_task<double(double)> pt(lam);
    std::future<double> ft = pt.get_future();
    std::thread t(std::move(pt),-1);
    t.join();
    ft.get();
}
{% endhighlight %}

通过函数的显式调用, std::promise 也能提供同样的功能。

{% highlight c++ %}
std::promise<double> p;

auto plam = [](double d)-> double {if(d < 0){p.set_exception(std::current_exception());}return d;};

void promise_excettion()
{
    std::future<double> ft = p.get_future();
    std::thread t(plam,-1);
    t.join();
    ft.get();
}
{% endhighlight %}

### 4.2.5 多个线程的等待

类模板 std::shared_future 提供访问异步操作结果的机制，类似 std::future ，除了允许多个线程等候同一共享状态。不同于仅可移动的 std::future （故只有一个实例能指代任何特定的异步果），std::shared_future 可复制而且多个 shared_future 对象能指代同一共享状态。

若每个线程通过其自身的 shared_future 对象副本访问，则从多个线程访问同一共享状态是安全的。

{% highlight c++ %}

void shared_future_func()
{
    std::promise<void> ready_promise,t1_ready_promise,t2_ready_promise;
    std::shared_future<void> ready_future(ready_promise.get_future());
    std::chrono::time_point<std::chrono::high_resolution_clock> start;

    auto fun1 = [&, ready_future]() -> std::chrono::duration<double, std::milli> 
    {
        t1_ready_promise.set_value();
        ready_future.wait();
        return std::chrono::high_resolution_clock::now() - start;
    };

    auto fun2 = [&, ready_future]() -> std::chrono::duration<double, std::milli> 
    {
        t2_ready_promise.set_value();
        ready_future.wait();
        return std::chrono::high_resolution_clock::now() - start;
    };

    auto result1 = std::async(std::launch::async, fun1);
    auto result2 = std::async(std::launch::async, fun2);

    //线程已经准备好
    t1_ready_promise.get_future().wait();
    t2_ready_promise.get_future().wait();

    // 线程已就绪，开始时钟
    start = std::chrono::high_resolution_clock::now();

    //向线程发送信号，使之运行
    ready_promise.set_value();

    std::cout << "Thread 1 received the signal "
              << result1.get().count() << " ms after start\n"
              << "Thread 2 received the signal "
              << result2.get().count() << " ms after start\n";

}

{% endhighlight %}


## 4.3 限定等待时间

两种指定的超时方式:一种是“时延”的超时方式,另一种是“绝对”超时方式。第一种方式,需要指定一段时间(例如,30毫秒);第二种方式,就是指定一个时间点

### 4.3.1 时钟

时钟是一个类,提供了四种不同的信息:
* 现在时间* 时间类型* 时钟节拍* 通过时钟节拍的分布,判断时钟是否稳定

时钟的当前时间可以通过调用静态成员函数now()从时钟类中获取;例如,std::chrono::system_clock::now() 是将返回系统时钟的当前时间。特定的时间点类型可以通过time_point的数据typedef成员来指定,所以some_clock::now()的类型就是some_clock::time_point。

时钟节拍被指定为1/x(x在不同硬件上有不同的值)秒,这是由时间周期所决定——一个时钟一秒有25个节拍,因此一个周期为 std::ratio<1, 25> 

std::chrono::system_clock 是不稳定的,因为时钟是可调的,即是这种是完全自动适应本地账户的调节。

C++标准库提供一个稳定时钟 std::chrono::steady_clock。

std::chrono::high_resolution_clock 可能是标准库中提供的具有最小节拍周期(因此具有最高的精度[分辨率])的时钟。

### 4.3.2 时延

std::chrono::duration<> 函数模板能够对时延进行处理。第一个模板参数是一个类型表示(比如,int,long或double),第二个模板参数是制定部分,表示每一个单元所用秒数。

标准库在 std::chrono 命名空间内,为延时变量提供一系列预定义类型:nanoseconds[纳秒] , microseconds[微秒] , milliseconds[毫秒] , seconds[秒] , minutes[分]和hours[时]。

{% highlight c++ %}

std::chrono::seconds sec(1);
typedef std::chrono::duration<float,std::ratio<60,1>> mins; //这里不能用int
//无精度损失
std::cout<<"1 sec is "<<mins(sec).count()<<"min"<<'\n';
//有精度损失
std::cout<<"1 sec is "<<std::chrono::duration_cast<std::chrono::minutes>(sec).count()<<"min"<<'\n';

std::future<int> f=std::async(some_task);
//等待35毫秒if(f.wait_for(std::chrono::milliseconds(35))==std::future_status::ready)  do_something_with(f.get());

{% endhighlight %}

### 4.3.3 时间点

时钟的时间点可以用 std::chrono::time_point<> 的类型模板实例来表示,实例的第一个参数用来指定所要使用的时钟,第二个函数参数用来表示时间的计量单位(特化的 std::chrono::duration<> )。

可以通过 std::chrono::time_point<> 实例来加/减时延,来获得一个新的时间点,所以 std::chrono::hight_resolution_clock::now() + std::chrono::nanoseconds(500) 将得到500纳秒后的时间。

{% highlight c++ %}
bool wait_loop()
{
    std::unique_lock<std::mutex> lk(mu);
    std::chrono::high_resolution_clock::time_point end = std::chrono::high_resolution_clock::now() + std::chrono::milliseconds(500);
    while(!done)
    {
        if(data_cond.wait_until(lk,end) == std::cv_status::timeout);
          break;
    }
    return done;
}
{% endhighlight %}

### 4.3.4 具有超时功能的函数

C++标准库中支持超时的函数

![](5.png)
![](6.png)